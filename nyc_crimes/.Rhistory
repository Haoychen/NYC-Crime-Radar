posterior1 <- unstd.posterior1 / sum(unstd.posterior1)
plot(p_grid, posterior1, type = "b",
xlab = "Probability of water", ylab = "Posterior probability")
prior1 <- rep(1, 101)
unstd.posterior1 <- likelihood * prior1
posterior1 <- unstd.posterior1 / sum(unstd.posterior1)
plot(p_grid, posterior1, type = "b",
xlab = "Probability of water", ylab = "Posterior probability")
prior2 <- ifelse(p_grid < 0.5, 0, 1/51)
unstd.posterior2 <- likelihood * prior2
posterior2 <- unstd.posterior2 / sum(unstd.posterior2)
plot(p_grid, posterior2, type = "b",
xlab = "Probability of water", ylab = "Posterior probability")
prior3 <- exp(-5 * abs(p_grid - 0.5))
sum(prior3)
plot(prior3)
prior3 <- exp(-5 * abs(p_grid - 0.5)) / sum(prior3)
sum(prior3)
unstd.posterior3 <- likelihood * prior3
sum(unstd.posterior3)
posterior3 <- unstd.posterior3 / sum(unstd.posterior3)
sum(posterior3)
plot(p_grid, posterior3, type = "b",
xlab = "Probability of water", ylab = "Posterior probability")
install.packages("rethinking")
library(rethinking)
install.packages("coda")
install.packages("mvtnorm")
install.packages("devtools")
library(devtools)
devtools::install_github("rmcelreath/rethinking")
library(rethinking)
dunif(0, 1)
?dunif
globe.qa <- map(
alist(
w ~ dbinom(9, p) # binomial likelihood
p ~ dunif(0, 1) # uniform prior
),
data = list(w = 6)
)
globe.qa <- map(
alist(
w ~ dbinom(9, p) # binomial likelihood
p ~ dunif(0, 1) # uniform prior
globe.qa <- map(
alist(
w ~ dbinom(9, p), # binomial likelihood
p ~ dunif(0, 1) # uniform prior
),
data = list(w = 6)
)
precis(globe.qa)
?precis
?map
rm(list = ls())
p_grid <- seq(from = 0, to = 1, length.out = 1001)
prior1 <- rep(1/1001, 1001)
likelihood <- dbinom(6, size = 9, prob = p_grid)
unstd.posterior1 <- likelihood * prior1
posterior1 <- unstd.posterior1 / sum(unstd.posterior1)
plot(p_grid, posterior1, type = "b",
xlab = "Probability of water", ylab = "Posterior probability")
posterior
posteror1
posterior1
samples1 <- sample(p_grid, prob = posterior1, size = 10000, replace = TRUE)
samples1
plot(samples1)
dens(samples1)
sum(posterior[p_grid < 0.5])
sum(posterior1[p_grid < 0.5])
sum(samples < 0.5) / 1e4
sum(samples1 < 0.5) / 1e4
quantile(samples1, c(0.1, 0.9))
PI(samples1, prob = 0.5)
HDPI(samples1, prob = 0.5)
HPDI(samples1, prob = 0.5)
HPDI
coda::HPDinterval
coda
?coda
HPDinterval
library(coda)
HPDinterval
p_grid[which.max(posterior)]
p_grid[which.max(posterior1)]
?chainmode
chainmode(samples1)
chainmode(samples1, adj = 0.01)
install.packages("sp")
install.packages("ipred")
install.packages("gstat")
install.packages("fields")
install.packages("maptools")
?runif
unif1 <- runif(10000)
unif2 <- runif(10000)
?log
unif1_over_2 <- unif1 / unif2
laplace1 <- log(unif1_over_2)
plot(laplace1)
hist(laplace1)
plot(density(laplace1))
unif1 <- runif(1000000)
unif2 <- runif(1000000)
unif1_over_2 <- unif1 / unif2
laplace1 <- log(unif1_over_2)
plot(density(laplace1))
SIMS <- 10^6 # number of draws to obtain
b <- 1
s <- sort(rexp(SIMS, rate = b))
beta <- rnorm(SIMS, mean = 0, sd = sqrt(2 * s))
summary(cbind(s, beta))
plot(density(beta), xlim = c(-5, 5), ylim = c(0, .5),
xlab = expression(beta), main = "", las = 1)
sd(beta)
sd(laplace1)
SIMS <- 10^6 # number of draws to obtain
b <- 1
s <- sort(rexp(SIMS, rate = b))
beta <- rnorm(SIMS, mean = 0, sd = sqrt(2 * s))
sd(beta)
sqrt(2)
SIMS <- 10^6 # number of draws to obtain
b <- 1
s <- sort(rexp(SIMS, rate = b))
beta <- rnorm(SIMS, mean = 2, sd = sqrt(2 * s))
sd(beta)
?rexp
exp1 <- rexp(1000000)
plot(density(exp2 - exp1))
exp1 <- rexp(1000000)
exp2 <- rexp(1000000)
plot(density(exp2 - exp1))
sd(exp2 - exp1)
beta1 <- rnorm(1000000, mean = 0, sd = sqrt(2 * rexp(1000000))
)
plot(density(beta1))
sd(beta1)
laplacenumbers <- rnorm(1000000, mean = 0, sd = sqrt(2 * rexp(1000000, rate = 1)))
plot(density(laplacenumbers))
laplacenumbers <- rnorm(1000, mean = 0, sd = sqrt(2 * rexp(1000, rate = 1)))
plot(density(laplacenumbers))
?rexp
exp1 <- rexp(1000000, rate = sqrt(2) / 2)
exp2 <- rexp(1000000, rate = sqrt(2) / 2)
sd(exp2 - exp1)
var(exp2 - exp1)
exp1 <- rexp(1000000, rate = sqrt(2) / 4)
exp2 <- rexp(1000000, rate = sqrt(2) / 4)
sd(exp2 - exp1)
exp1 <- rexp(1000000, rate = sqrt(2))
exp2 <- rexp(1000000, rate = sqrt(2))
sd(exp2 - exp1)
laplacenumbers <- exp2 - exp1
sd(laplacenumbers)
plot(density(laplacenumbers))
plot(density(rnorm(1000)))
rm(list = ls())
set.seed(4065)
curve(dnorm(beta, 0, 1, log = TRUE), from = -2, to = 2, xname = 'beta', ylim = c(-12, 0),
ylab = "density")
x <- rnorm(n = 9)
y_tilde <- rbinom(1000, size = 1, prob = 1 / (1 + exp(-(mean(x) * rnorm(1000, 0, 1)))))
beta_loglik <- function(beta_proposal, x, y) {
result <- rep(0, length(beta_proposal))
for (i in c(1:length(beta_proposal))) {
term1 <- 1 / (1 + exp(-beta_proposal[i] * x[which(y == 1)]))
term0 <- exp(-beta_proposal[i] * x[which(y == 0)]) /
(1 + exp(-beta_proposal[i] * x[which(y == 0)]))
result[i] <- log(prod(term1) * prod(term0))
}
return(result)
}
y_parity <- c(rep(c(1, 0), 4), 1)
curve(beta_loglik(beta_proposal, x = x, y = y_parity), from = -2, to = 2,
xname = "beta_proposal", add = TRUE, col = "blue")
beta_loglik(beta_proposal, x, y) + dnorm(beta_proposal, 0, 1, log = TRUE)
beta_log_posterior_kernel <- function(beta_proposal, x, y) {
beta_loglik(beta_proposal, x, y) + dnorm(beta_proposal, 0, 1, log = TRUE)
curve(beta_log_posterior_kernel(beta_proposal, x = x, y = y_parity), from = -2, to = 2,
xname = "beta_proposal", add = TRUE, col = "red")
text(x = 0, y = -0.3, labels = "log-prior")
text(x = 0, y = -5.5, labels = "log-likelihood")
text(x = 0, y = -8.8, labels = "log-posterior kernel")
SIMS <- 10^6 # number of draws to obtain
b <- 1
s <- sort(rexp(SIMS, rate = b))
beta <- rnorm(SIMS, mean = 0, sd = sqrt(2 * s))
summary(cbind(s, beta))
plot(density(beta), xlim = c(-5, 5), ylim = c(0, .5),
xlab = expression(beta), main = "", las = 1)
ddexp <- function(x, mu, b, log = FALSE) {
stopifnot(is.numeric(x), is.numeric(mu), is.numeric(b))
# PDF is 1 / (2 * b) * e^(-|x - mu| / b)
log_kernel <- -abs(x - mu) / b
if (!log) return(exp(log_kernel) / (2 * b))
else return(log_kernel - log(2 * b))
curve(ddexp(x, mu = 0, b), from = -5, to = 5, add = TRUE,
col = "red", lty = "dashed")
)
ddexp <- function(x, mu, b, log = FALSE) {
stopifnot(is.numeric(x), is.numeric(mu), is.numeric(b))
# PDF is 1 / (2 * b) * e^(-|x - mu| / b)
log_kernel <- -abs(x - mu) / b
if (!log) return(exp(log_kernel) / (2 * b))
else return(log_kernel - log(2 * b))
}
curve(ddexp(x, mu = 0, b), from = -5, to = 5, add = TRUE,
col = "red", lty = "dashed")
install.packages("shapefiles")
install.packages("spatstat")
install.packages("splancs")
5100 / 111.23
setwd("C:/Users/Arnold/Dropbox/Columbia/2016 Spring/STAT W4249 Applied Data Science/project2-group7/crimetest")
shiny::runApp()
library(leaflet)
library(dplyr)
library(sp)
library(rgdal)
shiny::runApp()
shiny::runApp()
shiny::runApp()
?checkboxGroupInput
shiny::runApp()
?sliderInput
?helpText
str(crime15)
library(leaflet)
library(dplyr)
library(sp)
library(rgdal)
crime15 <- read.csv("../output/crime15_nta.csv")
crime15 <- tbl_df(crime15)
str(crime15)
summary(crime15$Occurren_3)
crime15$Occurren_3 <- as.factor(crime15$Occurren_3)
summary(crime15$Occurren_3)
levels(crime15$Occurren_3)
crime15 <- read.csv("../output/crime15_nta.csv")
crime15 <- tbl_df(crime15)
table(crime15$Occurren_3)
crime15$Occurren_3 <- crime15$Occurren_3 / 100
table(crime15$Occurren_3)
shiny::runApp()
str(crime15)
crime15$Occurrence[150:167]
dateRangeInput
?dateRangeInput
?strsplit
str(crime15)
crime15$Occurrence_Date <- strsplit(crime15$Occurrence, split = " ")[1]
crime15$Occurrence_Date <- strsplit(as.character(crime15$Occurrence), split = " ")[1]
str(crime15)
str(crime15)
crime15$Occurrence_Date <- strsplit(as.character(crime15$Occurrence), split = " ")[[1]]
blah <- strsplit(as.character(crime15$Occurrence), split = " ")
blah[[1]]
blah[2]
blah[1]
blah[1][1]
blah
blah[[,]][1]
lapply(blah, "[[", 1)
crime15$Occurrence_Date <- lapply(strsplit(as.character(crime15$Occurrence), split = " "), "[[", 1)
str(crime15)
crime15$Occurrence_Date <- c(lapply(strsplit(as.character(crime15$Occurrence), split = " "), "[[", 1))
str(crime15)
c(lapply(blah, "[[", 1))
as.vector(c(lapply(blah, "[[", 1)))
crime15$Occurrence_Date <- unlist((lapply(strsplit(as.character(crime15$Occurrence), split = " "), "[[", 1)))
str(crime15)
?as.POSIXct
library(lubridate)
?lubridate
crime15$Occurrence_Date <- ymd(crime15$Occurrence_Date)
str(crime15)
levels(crime15$NTACode)
levels(crime15$NTAName)
crime15[1,
]
as.data.frame(crime15[1, ])
as.data.frame(crime15[10000, ])
as.data.frame(crime15[30000, ])
as.data.frame(crime15[50000, ])
?dateRangeInput
shiny::runApp()
shiny::runApp()
shiny::runApp()
?Date
?lubridate
crime15$Occurrence_Date <- unlist((lapply(strsplit(as.character(crime15$Occurrence), split = " "), "[[", 1)))
crime15$Occurrence_Date <- as.Date(crime15$Occurrence_Date) # convert to Date
str(crime15)
shiny::runApp()
as.data.frame(crime15[3])
as.data.frame(crime15[3, ])
str(crime15$Occurren_3)
summary(crime15$Occurren_3)
7 & 6
7 && 6
shiny::runApp()
str(nynta_crime)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
crime_density <- filter(crime15, Offense %in% c("BURGLARY"), Day.of.Wee %in% c("Monday"))
%>%
group_by(NTACode) %>%
summarize(num_crimes = n()) %>%
inner_join(pop_nta, by = c("NTACode" = "NTA.Code")) %>%
mutate(crime_density_per_1K = num_crimes / (Population / 1000)) %>%
arrange(NTACode)
nynta_crime <- subset(nynta, NTACode %in% crime_density$NTACode)
nynta_crime_not <- subset(nynta, !(NTACode %in% crime_density$NTACode))
nynta_crime_not$crime_density_per_1K <- 0
nynta_crime <- nynta_crime[order(nynta_crime$NTACode), ]
nynta_crime <- cbind(nynta_crime, crime_density$crime_density_per_1K)
names(nynta_crime)[8] <- "crime_density_per_1K"
nynta_crime <- rbind(nynta_crime, nynta_crime_not)
nynta_crime
crime_density <- filter(crime15, Offense %in% c("BURGLARY"), Day.of.Wee %in% c("Monday")) %>%
group_by(NTACode) %>%
summarize(num_crimes = n()) %>%
inner_join(pop_nta, by = c("NTACode" = "NTA.Code")) %>%
mutate(crime_density_per_1K = num_crimes / (Population / 1000)) %>%
arrange(NTACode)
nynta_crime <- subset(nynta, NTACode %in% crime_density$NTACode)
nynta_crime_not <- subset(nynta, !(NTACode %in% crime_density$NTACode))
nynta_crime_not$crime_density_per_1K <- 0
nynta_crime <- nynta_crime[order(nynta_crime$NTACode), ]
nynta_crime <- cbind(nynta_crime, crime_density$crime_density_per_1K)
names(nynta_crime)[8] <- "crime_density_per_1K"
nynta_crime <- rbind(nynta_crime, nynta_crime_not)
nynta_crime
nynta <- readOGR(dsn = "../data/nynta_15d", layer = "nynta_projected")
nynta <- spTransform(nynta, CRS("+proj=longlat +datum=WGS84")) # transform lat/lng for leaflet
pop_nta <- read.csv("../data/New_York_City_Population_by_Neighborhood_Tabulation_Areas.csv")
pop_nta <- filter(pop_nta, Year == 2010, Population != 0)
crime_density <- filter(crime15, Offense %in% c("BURGLARY"), Day.of.Wee %in% c("Monday")) %>%
group_by(NTACode) %>%
summarize(num_crimes = n()) %>%
inner_join(pop_nta, by = c("NTACode" = "NTA.Code")) %>%
mutate(crime_density_per_1K = num_crimes / (Population / 1000)) %>%
arrange(NTACode)
nynta_crime <- subset(nynta, NTACode %in% crime_density$NTACode)
nynta_crime_not <- subset(nynta, !(NTACode %in% crime_density$NTACode))
nynta_crime_not$crime_density_per_1K <- 0
nynta_crime <- nynta_crime[order(nynta_crime$NTACode), ]
nynta_crime <- cbind(nynta_crime, crime_density$crime_density_per_1K)
names(nynta_crime)[8] <- "crime_density_per_1K"
nynta_crime <- rbind(nynta_crime, nynta_crime_not)
nynta_crime
crime_density <- filter(crime15, Offense %in% c("BURGLARY"), Day.of.Wee %in% c("Monday")) %>%
group_by(NTACode) %>%
summarize(num_crimes = n()) %>%
inner_join(pop_nta, by = c("NTACode" = "NTA.Code")) %>%
mutate(crime_density_per_1K = num_crimes / (Population / 1000)) %>%
arrange(NTACode)
nynta_crime <- subset(nynta, NTACode %in% crime_density$NTACode)
nynta_crime_not <- subset(nynta, !(NTACode %in% crime_density$NTACode))
nynta_crime_not$crime_density_per_1K <- 0
nynta_crime <- nynta_crime[order(nynta_crime$NTACode), ]
nynta_crime <- cbind(nynta_crime, crime_density$crime_density_per_1K)
names(nynta_crime)[8] <- "crime_density_per_1K"
nynta_crime <- rbind(nynta_crime, nynta_crime_not)
str(nynta_crime@data)
summary(nynta_crime@data$crime_density_per_1K)
nynta_crime@data$crime_density_per_1K
shiny::runApp()
?colorQuantile
?unique
shiny::runApp()
?popupOptions
?paste
?cbind
str(crime_density)
shiny::runApp()
shiny::runApp()
rm(list = ls())
setwd("C:/Users/Arnold/Dropbox/Columbia/2016 Spring/STAT W4249 Applied Data Science/project2-group7/output")
crime15 <- read.csv("crime15_nta.csv")
nynta <- readOGR(dsn = "../data/nynta_15d", layer = "nynta_projected")
nynta <- spTransform(nynta, CRS("+proj=longlat +datum=WGS84")) # transform lat/lng for leaflet
pop_nta <- read.csv("../data/New_York_City_Population_by_Neighborhood_Tabulation_Areas.csv")
pop_nta <- filter(pop_nta, Year == 2010, Population != 0)
pop_nta
pop_nta <- arrange(pop_nta, Population)
pop_nta
crime_density <- group_by(crime15, NTACode) %>%
summarize(num_crimes = n()) %>%
inner_join(pop_nta, by = c("NTACode" = "NTA.Code")) %>%
mutate(crime_density_per_1K = num_crimes / (Population / 1000)) %>%
arrange(NTACode)
crime_density
crime_density <- arrange(crime_density, crime_density_per_1K)
crime_density
crime_density
?dateRangeInput
nynta_crime <- subset(nynta, NTACode %in% crime_density$NTACode)
nynta_crime <- nynta_crime[order(nynta_crime$NTACode), ]
nynta_crime <- cbind(nynta_crime, crime_density$crime_density_per_1K)
names(nynta_crime)[8] <- "crime_density_per_1K"
nynta_crime@data
pal_crime <- colorQuantile(palette = "Reds", domain = nynta_crime$crime_density_per_1K, n = 7)
leaflet() %>% addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = nynta_crime, weight = 2, fillOpacity = 0.7, color = ~pal_crime(crime_density_per_1K),
popup = nynta_crime$NTAName)
setwd("C:/Users/Arnold/Dropbox/Columbia/2016 Spring/STAT W4249 Applied Data Science/project2-group7/crimetest")
crime15 <- filter(crime15, Occurren_3 >= 0 & Occurren_3 <= 23)
crime15 <- read.csv("../output/crime15_nta.csv")
crime15 <- tbl_df(crime15)
summary(crime15$Occurren_3)
crime15$Occurren_3 <- crime15$Occurren_3 / 100 # occurrence hour
crime15$Occurrence_Date <- unlist((lapply(strsplit(as.character(crime15$Occurrence), split = " "), "[[", 1)))
crime15$Occurrence_Date <- as.Date(crime15$Occurrence_Date) # convert to Date class
crime15s <- filter(crime15, Occurren_3 >= 0 & Occurren_3 <= 23)
rm(crime15s)
crime15s <- filteR(crime15, Occurren_3 >= 18 & Occurren_3 <= 18)
crime15s <- filter(crime15, Occurren_3 >= 18 & Occurren_3 <= 18)
crime15s <- filter(crime15, Occurren_3 >= 18 | Occurren_3 <= 3)
crime15s <- filter(crime15, Occurren_3 >= 0 & Occurren_3 <= 23)
crime15s <- filter(crime15, Occurren_3 >= 0 & Occurren_3 <= 23, Offense %in% c("BURGLARY", "FELONY ASSAULT", "GRAND LARCENY",v"GRAND LARCENY OF MOTOR VEHICLE", "MURDER", "RAPE", "ROBBERY"), Day.of.Wee %in% c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))
crime15s <- filter(crime15, Occurren_3 >= 0 & Occurren_3 <= 23, Offense %in% c("BURGLARY", "FELONY ASSAULT", "GRAND LARCENY", "GRAND LARCENY OF MOTOR VEHICLE", "MURDER", "RAPE", "ROBBERY"), Day.of.Wee %in% c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))
input
shiny::runApp()
nynta_crime <- subset(nynta, NTACode %in% crime_density$NTACode)
nynta_crime_not <- subset(nynta, !(NTACode %in% crime_density$NTACode))
nynta_crime_not@data
nynta_crime_not$crime_density_per_1K <- 0
nynta_crime_not@data
nynta_crime <- nynta_crime[order(nynta_crime$NTACode), ]
nynta_crime <- cbind(nynta_crime, crime_density$crime_density_per_1K)
names(nynta_crime)[8] <- "crime_density_per_1K"
nynta_crime <- rbind(nynta_crime, nynta_crime_not)
nynta_crime@data
shiny::runApp()
nynta_crime@data
crime_density <- group_by(NTACode) %>% summarize(num_crimes = n())
crime_density <- group_by(crime15, NTACode) %>% summarize(num_crimes = n())
crime_density
as.data.frame(crime_density)
crime_density %>% inner_join(pop_nta, by = c("NTACode" = "NTA.Code"))
crime_density <- inner_join(crime_density, pop_nta, by = c("NTACode" = "NTA.Code"))
as.data.frame(crime_density)
crime_density <- mutate(crime_density, crime_density_per_1K = num_crimes / (Population / 1000))
as.data.frame(crime_density)
shiny::runApp()
shiny::runApp()
pop_nta
shiny::runApp()
nynta_crime@data
crime_density <- group_by(NTACode) %>%
summarize(num_crimes = n()) %>%
inner_join(pop_nta, by = c("NTACode" = "NTA.Code")) %>%
mutate(crime_density_per_1K = num_crimes / (Population / 1000)) %>%
arrange(NTACode)
crime_density <- group_by(crime15, NTACode) %>%
summarize(num_crimes = n()) %>%
inner_join(pop_nta, by = c("NTACode" = "NTA.Code")) %>%
mutate(crime_density_per_1K = num_crimes / (Population / 1000)) %>%
arrange(NTACode)
nynta_crime <- subset(nynta, NTACode %in% crime_density$NTACode)
nynta_crime_not <- subset(nynta, !(NTACode %in% crime_density$NTACode))
nynta_crime_not$crime_density_per_1K <- 0
nynta_crime <- nynta_crime[order(nynta_crime$NTACode), ]
nynta_crime <- cbind(nynta_crime, crime_density$crime_density_per_1K)
names(nynta_crime)[8] <- "crime_density_per_1K"
nynta_crime <- rbind(nynta_crime, nynta_crime_not)
nynta_crime@data
arrange(nynta_crime, crime_density_per_1K)
nynta_crime[nynta_crime@data$NTAName == grepl("park-cemetery", nynta_crime@data$NTAName)]
nynta_crime[nynta_crime@data$NTAName == grepl("park-cemetery", nynta_crime@data$NTAName)]@data
?grepl
grep("park-cemetery", nynta_crime@data$NTAName)
blah <- subset(nynta_crime, !grep("park-cemetery", nynta_crime@data$NTAName))
blah <- subset(nynta_crime, grep("park-cemetery", nynta_crime@data$NTAName))
blah <- nynta_crime@data[grep("park-cemetery", nynta_crime@data$NTAName)]
blah <- nynta_crime@data[grep("park-cemetery", nynta_crime@data$NTAName), ]
blah
blah <- nynta_crime[grep("park-cemetery", nynta_crime@data$NTAName), ]
blah@data
blah <- nynta_crime[!grep("park-cemetery", nynta_crime@data$NTAName), ]
blah@data
blah <- nynta_crime[!(grep("park-cemetery", nynta_crime@data$NTAName)), ]
blah@data
blah <- nynta_crime[grep("park-cemetery", nynta_crime@data$NTAName), ]
blah <- nynta_crime[-grep("park-cemetery", nynta_crime@data$NTAName), ]
shiny::runApp()
?popup
?popupOptions
shiny::runApp()
?mainPanel
?textOutput
shiny::runApp()
?helpText
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
crime15s <- filter(crime15, Occurren_3 >= 6 | Occurren_3 <= 3)
rm(crime15s)
shiny::runApp()
shiny::runApp()
round(digits = 2)
?round
shiny::runApp()
